{"version":3,"sources":["hooks/useModalReserved.js","components/ModalReserved.js","images/reserva.png","components/ReserveButton.js","components/GridRow.js","components/Grid.js","RidersApp.js","index.js"],"names":["useModalReserved","useState","ModalReserved","riderReserved","setRiderReserved","root","document","getElementById","classList","add","className","id","tabIndex","type","onClick","toggle","ReserveButton","buttonToChange","clicked","riders","disabled","src","reserva","alt","width","GridRow","hora","ridersAvailable","pressed","setPressed","getRiders","record","setClicked","scope","then","Riders","parseInt","updateRiders","a","fetch","method","headers","body","JSON","stringify","response","console","log","Grid","setRiders","json","data","useEffect","length","role","Object","keys","map","i","Hora","href","title","RidersApp","setInterval","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d4e333b0.chunk.js","sourcesContent":["import { useState } from \"react\"\n\nexport const useModalReserved = () => {\n\n    const [riderReserved, setRiderReserved] = useState(false);\n\n    return [ riderReserved, setRiderReserved ];\n}\n","import { useModalReserved } from \"../hooks/useModalReserved\"\n\nexport const ModalReserved = () => {\n\n    const [riderReserved, setRiderReserved] = useModalReserved();\n\n    const root = document.getElementById('root');\n\n    if ( riderReserved ){\n\n        root.classList.add( 'opacity-25' );\n\n        return (\n            <div className=\"modal fade show d-block\" id=\"staticBackdrop\" data-bs-backdrop=\"static\" data-bs-keyboard=\"true\" tabIndex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\n                <div className=\"modal-dialog modal-dialog-centered\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <h5 className=\"modal-title\">No hay Riders para esta hora</h5>\n                            <button type=\"button\" className=\"btn-close\" onClick={ () => {\n                                setRiderReserved( !riderReserved )\n                                root.classList.toggle('opacity-50')\n                            } }></button>\n                        </div>\n                        <div className=\"modal-body\">\n                            Lo sentimos, pero alguien acaba de reservar esta hora justo hace unos segundos.\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    } else{\n        return null;\n    }\n\n}\n","export default __webpack_public_path__ + \"static/media/reserva.3fb678c1.png\";","import reserva from '../images/reserva.png'\n\nexport const ReserveButton = ({ buttonToChange, clicked, id, riders }) => {\n\n    return (\n        <td>\n            <button\n                id={ 'btn' + id }\n                type=\"button\"\n                className={ clicked || riders === 0 ? \"btn btn-danger\" : \"btn btn-primary\"  }\n                onClick={() => {\n                    buttonToChange( id )\n                }}\n                disabled={ riders === 0 && clicked === false ? true : false }\n            >\n                <img src={reserva} alt=\"Reservar\" width=\"20\"/>\n            </button>\n        </td>\n    )\n}\n","// En este componente generamos cada una de las filas\n//de nuestra app, con cada rider\n\nimport { useState } from \"react\"\nimport { useModalReserved } from \"../hooks/useModalReserved\";\nimport { ReserveButton } from \"./ReserveButton\"\n\nexport const GridRow = ({ id, hora, ridersAvailable, pressed, setPressed, getRiders, record }) => {\n    \n    const [clicked, setClicked] = useState(false);\n    const [riderReserved, setRiderReserved] = useModalReserved();\n    \n    const buttonToChange = ( id ) => {\n\n        document.getElementById(`btn${id}`).disabled = true;\n\n        const ridersModify = () => {\n            // Si alguien ha solicitado ese rider antes salta el modal informando\n            if( record[ id - 1 ].Riders === 0 ){\n                setRiderReserved( !riderReserved );\n                return;\n            }\n            if ( clicked ){\n                record[ id - 1 ].Riders = parseInt(record[ id - 1 ].Riders) + 1;\n            } else {\n                record[ id - 1 ].Riders = parseInt(record[ id - 1 ].Riders) - 1;\n            }\n\n        }\n        // Recuperamos los datos de la API, por si han cambiado \n        getRiders()\n            .then( ridersModify() )\n        \n            const updateRiders = async () => {\n            const url = 'https://api.jsonbin.io/v3/b/614ebd7a4a82881d6c550e11';\n            await fetch( url, {\n                method: 'PUT',\n                headers: { \n                    'X-Master-Key': '$2b$10$nnuSg9tFuinZo/CM8ap4vep/s6l5iQkZwE2JkRHpQaVMGEHdmEqC2',\n                    'Content-type': 'application/json'\n                },\n                body: JSON.stringify(record)\n            })\n                .then( (response) => console.log(response))\n                await ( document.getElementById(`btn${id}`).disabled = false )\n                await ( setPressed( !pressed ) )\n                await ( setClicked( !clicked ) )\n            }\n\n        updateRiders();\n\n    };\n    \n    return (\n        <tr className={ clicked || ridersAvailable === 0 ? \"table-danger\" : \"table-light\" } \n            key={ id } \n            id={ id }\n        >\n            <th scope=\"row\">{ hora }</th>\n            <td>{ ridersAvailable }</td>\n            {\n                // Si hay riders mostrar√° 'disponible', sino 'No disponible'\n                ridersAvailable === 0 ? (<td>No disponible</td>) : (<td>Disponible</td>)\n            }\n            <ReserveButton \n                key={ id }\n                id={ id }\n                buttonToChange={ buttonToChange }\n                clicked={ clicked }\n                ridersAvailable={ ridersAvailable }\n            />\n        </tr>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { GridRow } from \"./GridRow\";\n\n// En este componente generamos el grid de la app\nexport const Grid = ({ pressed, setPressed }) => {\n\n    // Inicializamos estado del componente\n    const [ riders, setRiders ] = useState([]);\n    \n    const getRiders = async () => {\n        const url = 'https://api.jsonbin.io/v3/b/614ebd7a4a82881d6c550e11/latest';\n        await fetch( url, { headers: { 'X-Master-Key': '$2b$10$nnuSg9tFuinZo/CM8ap4vep/s6l5iQkZwE2JkRHpQaVMGEHdmEqC2'}} )\n            .then( response => response.json())\n            .then( data => setRiders( data));\n    };\n\n    useEffect( () => {\n        getRiders();\n    }, [pressed]);\n\n    // Desestructuramos el array de riders\n    const { record } = riders;\n    \n    // Retornamos nuestro componente\n    return (\n        \n        // Si el array de riders es 0 mostramos 'Loading'\n            riders.length === 0 ?\n            <div className=\"prueba container position-absolute top-50 start-50\">\n                <div className=\"spinner-border text-primary\" role=\"status\">\n                    <span className=\"sr-only w-3\"></span>\n                </div>\n                <p>Loading</p>\n            </div>\n            :\n            // sino mostramos riders\n            (   \n                <>\n                    <table className=\"table table-hover\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">Horas</th>\n                            <th scope=\"col\">Free Riders</th>\n                            <th scope=\"col\">Estado</th>\n                            <th scope=\"col\">Reservar</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            \n                            Object.keys(record).map( i => (\n                                    <GridRow \n                                        id={ record[i].id }\n                                        key={ record[i].id }\n                                        hora={ record[i].Hora }\n                                        ridersAvailable={ record[i].Riders }\n                                        pressed={ pressed }\n                                        setPressed={ setPressed }\n                                        record={ record }\n                                        getRiders={ getRiders }\n                                    />\n                                    ))\n                                    \n                        }\n                    </tbody>\n                </table>\n                <div>Iconos dise√±ados por <a href=\"https://www.freepik.com\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.es/\" title=\"Flaticon\">www.flaticon.es</a></div>\n            </>\n            )\n\n    )\n}\n","import { useEffect } from 'react';\nimport { useState } from 'react';\nimport { Grid } from './components/Grid';\n\nexport const RidersApp = () => {\n    \n    // Siempre que pressed cambie actualizamos los riders\n    const [pressed, setPressed] = useState(false);\n\n    //eslint-disable-next-line\n    let controlledRequest = [];\n    \n    useEffect( () => {\n        /*Petici√≥n API para actualizar riders disponibles\n        Con cada render del componente controlledRequest se resetea \n        de esta manera no genera algun funcionamiento inesperado*/\n\n            // eslint-disable-next-line\n            controlledRequest = setInterval(() => {\n                setPressed(!pressed);\n            }, 60000);\n    });\n\n\n    //Este es nuestro componente principal\n\n    return (\n        <div className=\"container\">\n            <h1 className=\"text-center mt-5\">Horarios disponibles</h1>\n            <Grid \n                pressed={ pressed }\n                setPressed={ setPressed }\n            />\n        </div>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ModalReserved } from './components/ModalReserved';\nimport { RidersApp } from './RidersApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RidersApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <ModalReserved />\n  </React.StrictMode>,\n  document.getElementById('modalOpen')\n);"],"sourceRoot":""}